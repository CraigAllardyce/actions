image: node:14

default:
  tags:
    - focus-ci

variables:
  CYPRESS_INSTALL_BINARY: 0
  CYPRESS_IMAGE: registry.nflex.io/bespin/gitlab-runner-cypress:6.9.1

cache:
  key: cache-it-all
  paths:
    - .npm/

before_script:
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - touch ~/.npmrc
  - echo tag-version-prefix= >> ~/.npmrc
  - echo @focus:registry=https://artifactory.dimensiondata.com/artifactory/api/npm/npm/ >> ~/.npmrc
  - echo @insight:registry=https://artifactory.dimensiondata.com/artifactory/api/npm/npm/ >> ~/.npmrc
  - echo @sp:registry=https://artifactory.dimensiondata.com/artifactory/api/npm/npm/ >> ~/.npmrc
  - echo //artifactory.dimensiondata.com/artifactory/api/npm/npm/:_auth=$ARTIFACTORY_AUTH >> ~/.npmrc
  - echo //artifactory.dimensiondata.com/artifactory/api/npm/npm/:always-auth=true >> ~/.npmrc
  - echo //artifactory.dimensiondata.com/artifactory/api/npm/npm/:email=$ARTIFACTORY_EMAIL >> ~/.npmrc
  - git config --global user.name "$GITLAB_USER_NAME"
  - git config --global user.email "$GITLAB_USER_EMAIL"

stages:
  - Unit Test
  - Build
  - Integration Test
  - Version
  - Upload
  - Deploy

Unit Test:
  stage: Unit Test
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run lint --if-present -- --no-error-on-unmatched-pattern
    - npm run test --if-present -- --passWithNoTests
    - exit 1
  artifacts:
    reports:
      junit: results/junit.xml
      cobertura: results/clover.xml
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /^\d+\.\d+\.\d+/ && $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

Build:
  stage: Build
  needs: []
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run prod
  artifacts:
    paths:
      - build/dist/
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /^\d+\.\d+\.\d+/ && $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

Playwright:
  stage: Integration Test
  image: mcr.microsoft.com/playwright:v1.17.1
  allow_failure: true
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test:integration --if-present
  artifacts:
    reports:
      junit: results/integration-test-results.xml
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /^\d+\.\d+\.\d+/ && $CI_COMMIT_BRANCH == "develop"
      exists:
        - playwright.config.js

Cypress:
  stage: Integration Test
  image: $CYPRESS_IMAGE
  allow_failure: true
  script:
    - npm ci --cache .npm --prefer-offline
    - npm i -g @insight/app-serve
    - npx @insight/app-serve --ssl --region focus.nflex.io --disable-api-keys &
    - npm run test:integration --if-present
  artifacts:
    when: on_failure
    paths:
      - cypress/videos/
    reports:
      junit: results/cypress-report-*.xml
  rules:
    - if: $CYPRESS_IMAGE && $CI_COMMIT_MESSAGE !~ /^\d+\.\d+\.\d+/ && $CI_COMMIT_BRANCH == "develop"

.pull: &pull
  - SSH_URL=$(echo "${CI_REPOSITORY_URL}" | sed -e 's|https\?://gitlab-ci-token:.*@|ssh://git@|g')
  - git remote set-url origin $SSH_URL
  - git fetch --prune origin "+refs/tags/*:refs/tags/*"
  - git checkout develop
  - git pull
  - git describe --abbrev=0 --tags
  - git describe --tags
  - if [[ $(git describe --abbrev=0 --tags) != $(git describe --tags) ]]; then echo 'Looks good - versioning..'; else echo 'Clean tag. Aborting'; exit 1; fi

.push: &push
  - git push
  - git push --tags

# Manual stages for versioning the app
Patch:
  stage: Version
  when: manual
  needs:
    - Unit Test
    - Build
  script:
    - *pull
    - echo "Version with a PATCH"
    - npm version patch
    - *push
  variables:
    GIT_STRATEGY: clone
  only:
    variables:
      - $CI_COMMIT_MESSAGE !~ /^\d+\.\d+\.\d+/ && $CI_COMMIT_BRANCH == "develop"

Minor:
  stage: Version
  when: manual
  needs:
    - Unit Test
    - Build
  script:
    - *pull
    - echo "Version with a MINOR"
    - npm version minor
    - *push
  only:
    variables:
      - $CI_COMMIT_MESSAGE !~ /^\d+\.\d+\.\d+/ && $CI_COMMIT_BRANCH == "develop"

Major:
  stage: Version
  when: manual
  needs:
    - Unit Test
    - Build
  script:
    - *pull
    - echo "Version with a MAJOR"
    - npm version major
    - *push
  only:
    variables:
      - $CI_COMMIT_MESSAGE !~ /^\d+\.\d+\.\d+/ && $CI_COMMIT_BRANCH == "develop"

# We build and upload any tagged commits
Azure:
  stage: Upload
  cache: {}
  script:
    - tag=$(git describe --tag --always)
    - cd build/dist
    - tar -czf ../$CI_PROJECT_NAME'-'$tag'.tgz' *
    - npx @insight/app-upload-env-update --app $CI_PROJECT_NAME --build ../$CI_PROJECT_NAME'-'$tag'.tgz' --tag $tag --repo "https://FOCUS-RELEASE:$GITLAB_ALLARDYCE@scm.dimensiondata.com/insight/services-portal-releases/focus-release.git";
  only:
    refs:
      - tags

PyPI:
  stage: Upload
  cache: {}
  script:
    - tag=$(git describe --tag --always)
    - cd build/dist
    - tar -czf ../$CI_PROJECT_NAME'-'$tag'.tgz' *
    - "curl -v -u $PYPI_AUTH --form ':action=file_upload' --form name=${CI_PROJECT_NAME} --form version=${tag} --form content=@../${CI_PROJECT_NAME}-${tag}.tgz http://pypi.nflex.io:80/pypi/"
  only:
    refs:
      - tags

Deploy Focus:
  tags:
    - focus-ci-shell
  stage: Deploy
  cache: {}
  before_script:
    - echo "nothing to do.."
  variables:
    GIT_STRATEGY: none
  script:
    - cd /home/jenkins/shared/deploy
    - ./generate-config -p focus -v latest-dirty -g focus -o
    - ./focus -s ${CI_PROJECT_NAME#focus-} up
  only:
    refs:
      - tags
